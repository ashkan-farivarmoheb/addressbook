plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.avast.gradle.docker-compose' version '0.16.12'
}

apply plugin: 'docker-compose'

group = 'com.reece'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.apache.commons:commons-pool2:2.11.1'
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework:spring-webflux'
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

dockerCompose {
	def dockerProperties = project.getProperties()
	def keys = dockerProperties.findAll {it.key.contains("DOCKER_")}.collect { it.key }
	def dockerEnvs = dockerProperties.subMap(keys)

	dockerEnvs.forEach({ key, value ->
		println "$key=$value"
		environment.put key, value
	})

	useComposeFiles = ["src/main/docker/compose/test/docker-compose-test.yml"]
	dockerComposeStopTimeout = java.time.Duration.ofSeconds(10)
}

jar {
	enabled = false
}

//bootBuildImage {
//	imageName = "reece/addressbook"
//	createdDate = "now"
//}

def dockerClean = tasks.register('dockerClean') {
	doLast {
		exec {
			executable "sh"
			args "-c", "docker rm -f \$(docker ps -aq) | true"
		}
	}
}

task startTestEnvironment {
	dependsOn += ['composeUp']
}

task stopTestEnvironment {
	dependsOn += ['composeDown']
}

tasks.named('test') {
	filter {
		//exclude all tests from a package.
		includeTestsMatching "*.**.unit.**"

	}
	useJUnitPlatform()
}

task componentTest(type: Test) {
	description = "Run Component Tests"
	group = "verification"
	filter {
		//exclude all tests from a package.
		includeTestsMatching "*.**.component.*"

	}
	useJUnitPlatform()
}

composeUp.dependsOn(dockerClean)
tasks.componentTest.mustRunAfter(tasks.test)
tasks.componentTest.dependsOn(tasks.startTestEnvironment)
tasks.componentTest.finalizedBy(tasks.stopTestEnvironment)

